import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt
from tensorflow import keras
from sklearn.decomposition import PCA
import pickle
import joblib

def main():

    st.title('Android Malware Detection dashboard')

    st.info('''Welcome to Android Malware Detection dashboard''')
    st.markdown('Mobile malware is malicious software that targets mobile phones or wireless-enabled Personal digital assistants (PDA), by causing the collapse of the system and loss or leakage of confidential information. As wireless phones and PDA networks have become more and more common and have grown in complexity, it has become increasingly difficult to ensure their safety and security against electronic attacks in the form of viruses or other malware.')
    st.image("Images/cover.jpg")
    def UploadFile():
        uploaded_file = st.file_uploader("", type='csv')
        if uploaded_file is not None:
            st.success('File uploaded!')
            return (pd.read_csv(uploaded_file))
    
    df = UploadFile()
    try:

        st.sidebar.title('Settings')
        option = st.sidebar.selectbox('Model for prediction', ('PCA with DNN model', 'Deep Neural Net', 'Extra Trees'))
        if option == 'PCA with DNN model':
            st.checkbox('Predict')
            model = keras.models.load_model('model_find/PCA_2DNN.h5')
            df_copy = df.copy()
            df_copy.drop(['class', 'Unnamed: 0'], axis=1, inplace=True)
            pca = PCA(n_components=150)
            df_pca = pca.fit_transform(df_copy)
            pred = model.predict(df_pca)
            pred = np.argmax(pred, axis=1)
            df_copy['Label'] = pred
            st.write(df_copy)
        elif option == 'Deep Neural Net':
            st.checkbox('Predict')
            model = keras.models.load_model('model_find/dnn_2layer.h5')
            df_copy = df.copy()
            df_copy.drop(['class', 'Unnamed: 0'], axis=1, inplace=True)
            pred = model.predict(df_copy)
            pred = np.argmax(pred, axis=1)
            df_copy['Label'] = pred
            st.write(df_copy)
        elif option == 'Extra Trees':
            st.checkbox('Predict')
            model = pickle.load(open('model_find/extra_tree.sav', 'rb'))
            df_copy = df.copy()
            df_copy.drop(['class', 'Unnamed: 0'], axis=1, inplace=True)
            pred = model.predict(df_copy)
            pred = np.argmax(pred, axis=1)
            df_copy['Label'] = pred
            st.write(df_copy)
    except:
        st.balloons()
if __name__ == "__main__":
    main()